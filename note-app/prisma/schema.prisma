// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  name                 String?
  email                String                @unique
  image                String?
  password             String?
  notes                Note[]
  emailVerified        DateTime?
  passwordResetRequest PasswordResetRequest?
  accounts             Account[]
  sessions             Session[]
  settings             UserSettings?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Note {
  id         String   @id @default(uuid())
  title      String
  content    String
  tags       String[]
  isArchived Boolean  @default(false)
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  lastEdited DateTime @updatedAt
}

model UserSettings {
  id         String   @id @default(uuid())
  colorTheme String   @default("system") // light, dark, system
  fontTheme  String   @default("sans-serif") // sans-serif, serif, monospace
  userId     String   @unique
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PasswordResetRequest {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String   @unique // Ensures one request per user
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}
